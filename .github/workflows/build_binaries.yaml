name: Build QMK firmware

on: [push, workflow_dispatch]

permissions:
    contents: write

jobs:
    build:
        name: "QMK Userspace Build"
        uses: qmk/.github/.github/workflows/qmk_userspace_build.yml@main
        with:
            qmk_repo: bastardkb/bastardkb-qmk
            qmk_ref: bkb-master

    publish:
        name: "QMK Userspace Publish"
        uses: qmk/.github/.github/workflows/qmk_userspace_publish.yml@main
        if: always() && !cancelled()
        needs: build

    update-release:
        name: "Update Release Timestamp"
        runs-on: ubuntu-latest
        needs: publish

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Get the latest release
              id: get_release
              uses: actions/github-script@v3
              with:
                  script: |
                      const { data: releases } = await github.repos.listReleases({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                      });
                      if (releases.length === 0) {
                        throw new Error('No releases found');
                      }
                      return { id: releases[0].id, name: releases[0].name, body: releases[0].body, tag_name: releases[0].tag_name, target_commitish: releases[0].target_commitish };

            - name: Update release timestamp
              uses: actions/github-script@v3
              with:
                  script: |
                      const release_id = core.getInput('release_id');
                      const { id, name, body, tag_name, target_commitish } = JSON.parse(core.getInput('release_data'));
                      await github.repos.updateRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        release_id: id,
                        draft: false,
                        prerelease: false,
                        name: name,
                        body: body,
                        tag_name: tag_name,
                        target_commitish: target_commitish,
                        created_at: new Date().toISOString(),
                      });
                  inputs:
                      release_id: ${{ steps.get_release.outputs.id }}
                      release_data: ${{ steps.get_release.outputs }}
