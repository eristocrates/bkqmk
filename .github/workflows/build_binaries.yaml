name: Build QMK firmware

on: [push, workflow_dispatch]

permissions:
    contents: write

jobs:
    build:
        name: "QMK Userspace Build"
        uses: qmk/.github/.github/workflows/qmk_userspace_build.yml@main
        with:
            qmk_repo: bastardkb/bastardkb-qmk
            qmk_ref: bkb-master

    publish:
        name: "QMK Userspace Publish"
        uses: qmk/.github/.github/workflows/qmk_userspace_publish.yml@main
        if: always() && !cancelled()
        needs: build

    update-release:
        name: "Update Release Timestamp"
        runs-on: ubuntu-latest
        needs: publish

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Get the latest release
              id: get_release
              uses: actions/github-script@v3
              with:
                  script: |
                      const { data: releases } = await github.repos.listReleases({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                      });
                      if (releases.length === 0) {
                        throw new Error('No releases found');
                      }
                      core.exportVariable('RELEASE_ID', releases[0].id);
                      core.exportVariable('RELEASE_NAME', releases[0].name);
                      core.exportVariable('RELEASE_BODY', releases[0].body);
                      core.exportVariable('RELEASE_TAG_NAME', releases[0].tag_name);
                      core.exportVariable('RELEASE_TARGET_COMMITISH', releases[0].target_commitish);

            - name: Update release timestamp
              uses: actions/github-script@v3
              env:
                  RELEASE_ID: ${{ env.RELEASE_ID }}
                  RELEASE_NAME: ${{ env.RELEASE_NAME }}
                  RELEASE_BODY: ${{ env.RELEASE_BODY }}
                  RELEASE_TAG_NAME: ${{ env.RELEASE_TAG_NAME }}
                  RELEASE_TARGET_COMMITISH: ${{ env.RELEASE_TARGET_COMMITISH }}
              with:
                  script: |
                      await github.repos.updateRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        release_id: process.env.RELEASE_ID,
                        draft: false,
                        prerelease: false,
                        name: process.env.RELEASE_NAME,
                        body: process.env.RELEASE_BODY,
                        tag_name: process.env.RELEASE_TAG_NAME,
                        target_commitish: process.env.RELEASE_TARGET_COMMITISH,
                        created_at: new Date().toISOString(),
                      });
